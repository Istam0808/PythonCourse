#FIRST EXERSISE 

# x = [1,2,3,4,5,6,7,8,9]
# sumall = sum(x)
# deletemax = max(x)
# a = sumall - deletemax
# if a % 2 == 0:
#     print(f"{a} is even")
# elif a % 2 != 0:
#     print(f"{a} is odd")

#=======================================================================================

#SECOND EXERSISE

# def third_biggest(numbers):    
#     first_max = max(numbers)
#     numbers.remove(first_max)
#     second_max = max(numbers)
#     numbers.remove(second_max)
#     third_max = max(numbers)
#     return third_max

# numbers = [1,2,3,4,5,6,7,8,9]
# third_largest = third_biggest(numbers)
# print(third_largest)

#=======================================================================================

#THIRD EXERSISE

# def find_avarage(arr):
#     a = sum(arr) / len(arr)
#     x = round(a)
#     idx = arr.index(x)
#     return x, idx

# arr = [13,22,33,35,41,52]
# x,idx = find_avarage(arr)
# print('avarage: ', sum(arr) / len(arr))
# print('close:', x)
# print('index: ', idx)

#=======================================================================================

#=======================================================================================
#=======================================================================================
#HOMEWORK
#=======================================================================================
#=======================================================================================

# 3. Write a program that takes a list of strings as input and returns the longest string.
# RU: Напишите программу, которая принимает список строк в качестве входных
# данных и возвращает самую длинную строку.

# def max_string (string):
#    return max(string, key=len)
# print(max_string(['istam', 'shaxa', 'hesoyam', 'neznayu']))
#=======================================================================================

# 4. Write a program that takes a string as input and returns the number of letters in each string.
# RU: Напишите программу, которая принимает строк в качестве входных данных
# и возвращает количество букв в каждой строке.

# def count_letters(lst):
#     string = ''.join(lst)
#     qwer = list(filter(lambda x: x, set(string)))
#     letter_counts = {}
#     for char in string:
#         if char in letter_counts:
#             letter_counts[char] += 1
#         else:
#             letter_counts[char] = 1
#     for letter, count in sorted(letter_counts.items()):
#         print(letter, "=", count)

# letters_list = ["Istam","rustam"]
# count_letters(letters_list)
#=======================================================================================

# 5. Write a program that takes a list of numbers as input and
# returns the average of the numbers.
# RU: Напишите программу, которая принимает список чисел в качестве
# входных данных и возвращает среднее значение чисел.
# [13, 22, 35, 41, 52]   => 13+22+35+41+52 = 163 / 5 = 32.6

# def get_avarage(arr):
#     avarage = sum(arr) / len(arr)
#     nearest = min(arr, key=lambda x: abs(x - avarage))
#     return avarage, nearest
            
# listarr = [23, 12, 52, 24, 55, 74, 14, 27]

# print(listarr)
# avarage, nearest = get_avarage(listarr)
# print(f"The average is {avarage}, the nearest is {nearest}")














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































