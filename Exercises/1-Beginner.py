# 1. Character Input
#    Create a program that asks the user to enter their name and their age.
# 2. Odd Or Even
#    Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user.
# 3. List Less Than Ten
#    Take a list, say for example this one:
#    a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
#    and write a program that prints out all the elements of the list that are less than 5.
# 4. Divisors
#    Create a program that asks the user for a number and then prints out a list of all the divisors of that number.
# 5. List Overlap
#    Take two lists, say for example these two:
#    a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
#    b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
#    and write a program that returns a list that contains only the elements that are common between the lists (without duplicates).
# 6. String Lists
#    Ask the user for a string and print out whether this string is a palindrome or not.
# 7. List Comprehensions
#    Let’s say I give you a list saved in a variable:
#    a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
#    Write one line of Python that takes this list a and makes a new list that has only the even elements of this list in it.
# 8. Rock Paper Scissors
#    Make a two-player Rock-Paper-Scissors game using input().
# 9. Guessing Game One
#    Generate a random number between 1 and 9 (including 1 and 9). Ask the user to guess the number,
#    then tell them whether they guessed too low, too high, or exactly right.
# 10. List Overlap Comprehensions
#     Revisiting an old exercise (see Exercise 5),
#     Take two lists, say for example these two:
#     and write a program that returns a list that do not contain only the elements that are common between the lists (without duplicates).
# 11. Check Primality Functions
#     Ask the user for a number and determine whether the number is prime or not.
# 12. List Ends
#     Write a program that takes a list of numbers (for example, a = [5, 10, 15, 20, 25]) and
#     makes a new list of only the first and last elements of the given list
# 13. Fibonacci
#     Write a program that asks the user how many Fibonnaci numbers to generate and then generates them.
#     Take this opportunity to think about how you can use functions. Make sure to ask the user to enter the number of numbers in the sequence to generate.
#     (Hint: The Fibonnaci seqence is a sequence of numbers where the next number in the sequence is the sum of the previous two numbers in the sequence.
#     The sequence looks like this: 1, 1, 2, 3, 5, 8, 13, …)
# 14. List Remove Duplicates
#     Write a program (function!) that takes a list and returns a new list
#     that contains all the elements of the first list minus all the duplicates.
#     Write two different functions to do this - one using a loop
#     and constructing a list, and another using sets.
# 15. Reverse Word Order
#     Write a program (using functions!) that asks the user for a long string containing multiple words.
#     Print back to the user the same string, except with the words in backwards order.
#     For example, say I type the string:
#     My name is Michele
#     Then I would see the string:
#     Michele is name My
#     shown back to me.
# 16. Password Generator
#     Write a password generator in Python. Be creative with how you generate passwords - strong passwords have a mix of lowercase letters, uppercase letters,
#     numbers, and symbols. The passwords should be random, generating a new password every time the user asks for a new password.
#     Include your run-time code in a main method.
#     Extra:
#     Ask the user how strong they want their password to be. For weak passwords, pick a word or two from a list.
# 17. Cows And Bulls
#     Create a program that will play the “cows and bulls” game with the user. The game works like this:
#     Randomly generate a 4-digit number. Ask the user to guess a 4-digit number. For every digit that the user guessed correctly in the correct place,
#     they have a “cow”. For every digit the user guessed correctly in the wrong place is a “bull.” Every time the user makes a guess,
#     tell them how many “cows” and “bulls” they have. Once the user guesses the correct number, the game is over. Keep track of the number of guesses
#     the user makes throughout teh game and tell the user at the end.
#     Say the number generated by the computer is 1038. An example interaction could look like this:
#     Welcome to the Cows and Bulls Game!
#     Enter a number:
#     >>> 1234
#     2 cows, 0 bulls
#     >>> 1256
#     1 cow, 1 bull
#     ...
# 18. Element Search
#     Write a function that takes an ordered list of numbers (a list where the elements are in order from smallest to largest) and another number.
#     The function decides whether or not the given number is inside the list and returns (then prints) an appropriate boolean.
#     Extras:
#     Use binary search.
# 19. File Overlap
#     Given two .txt files that have lists of numbers in them, find the numbers that are overlapping.
#     One .txt file has a list of all prime numbers under 1000,
#     and the other .txt file has a list of happy numbers up to 1000.
# 20. Draw A Game Board
#     Time for some fake graphics! Let’s say we want to draw game
#     boards that look like this:
#     --- --- ---
#     |   |   |   |
#     --- --- ---
#     |   |   |   |
#     --- --- ---
#     |   |   |   |
#     --- --- ---
#     This one is 3x3 (like in tic tac toe). Obviously, they come in many other sizes (8x8 for chess, 19x19 for Go, and many more).
#     Ask the user what size game board they want to draw, and draw it for them to the screen using Python’s print statement.
# def draw_board(size):
#     for i in range(size):
#         print(" ---" * size)
#         print("|   " * (size+1))
#     print(" ---" * size)
#
# 21. Guessing Game Two
#     In a previous exercise, we’ve written a program that “knows” a number and asks a user to guess it.
#     This time, we’re going to do exactly the opposite. You, the user, will have in your head a number between 0 and 100.
#     The program will guess a number, and you, the user, will say whether it is too high, too low, or your number.
#     At the end of this exchange, your program should print out how many guesses it took to get your number.
#     As the writer of this program, you will have to choose how your program will strategically guess.
#     A naive strategy can be to simply start the guessing at 1, and keep going (2, 3, 4, etc.) until you hit the number.
#     But that’s not an optimal guessing strategy. An alternate strategy might be to guess 50 (right in the middle of the range),
#     and then increase / decrease by 1 as needed. After you’ve written the program, try to find the optimal strategy!
#
# 22. Check Tic Tac Toe
#     Given a 3 by 3 list of lists that represents a Tic Tac Toe game board, tell me whether anyone has won,
#     and tell me which player won, if any. A Tic Tac Toe win is 3 in a row - either in a row, a column, or a diagonal.
#     Don’t worry about the case where TWO people have won - assume that in every board there will only be one winner.
# def check_tic_tac_toe(board):
#     for i in range(3):
#         if board[i][0] == board[i][1] == board[i][2]:
#             return board[i][0]
#         elif board[0][i] == board[1][i] == board[2][i]:
#             return board[0][i]
#     if board[0][0] == board[1][1] == board[2][2]:
#         return board[0][0]
#     elif board[0][2] == board[1][1] == board[2][0]:
#         return board[0][2]
#     return False
# 23. Max Of Three
#     Implement a function that takes as input three variables, and returns the largest of the three.
#     Do this without using the Python max() function!
#     The goal of this exercise is to think about some internals that Python normally takes care of for us.
#     All you need is some variables and if statements!
# 24. Pick Word
#     In this exercise, the task is to write a function that picks a random word from a list of words from the SOWPODS dictionary.
#     Download this file and save it in the same directory as your Python code. This file is Peter
#     Norvig’s compilation of the dictionary of words used in professional Scrabble tournaments.
#     Each line in the file contains a single word.
#     Hint: use the Python random library for picking a random word.
# import random
# def pick_word():
#     with open("sowpods.txt", "r") as f:
#         words = f.readlines()
#     return random.choice(words).strip()

# 25. Guess Letters
# Let’s continue building Hangman. In the game of Hangman, a clue word is given by the program that the player has to guess,
# letter by letter. The player guesses one letter at a time until the entire word has been guessed. (In the actual game,
# the player can only guess 6 letters incorrectly before losing).

# Let’s say the word the player has to guess is “EVAPORATE”. For this exercise, write the logic that asks a
# player to guess a letter and displays letters in the clue word that were guessed correctly. For now, let the
# player guess an infinite number of times until they get the entire word. As a bonus, keep track of the letters
# the player guessed and display a different message if the player tries to guess that letter again. Remember to
# stop the game when all the letters have been guessed correctly! Don’t worry about choosing a word randomly or
# keeping track of the number of guesses the player has remaining - we will deal with those in a future exercise.

# An example interaction can look like this:

# >>> Welcome to Hangman!
# _ _ _ _ _ _ _ _ _
# >>> Guess your letter: S
# Incorrect!
# >>> Guess your letter: E
# E _ _ _ _ _ _ _ E
# ...
# def guess_letters():
#     word = "EVAPORATE"
#     guessed = "_" * len(word)
#     word = list(word)
#     guessed = list(guessed)
#     lstGuessed = []
#     letter = input("guess letter: ")
#     while True:
#         if letter.upper() in lstGuessed:
#             letter = ''
#             print("Already guessed!!")
#         elif letter.upper() in word:
#             index = word.index(letter.upper())
#             guessed[index] = letter.upper()
#             word[index] = '_'
#         else:
#             print(''.join(guessed))
#             if letter is not '':
#                 lstGuessed.append(letter.upper())
#             letter = input("guess letter: ")
#         if '_' not in guessed:
#             print("You won!!")
#             break
